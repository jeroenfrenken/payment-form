/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Api documentation
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "https://localhost".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface Calendar
 */
export interface Calendar {
    /**
     * Mongoose ObjectId
     * @type {string}
     * @memberof Calendar
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Calendar
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Calendar
     */
    owner?: string;
}

/**
 * 
 * @export
 * @interface CalendarEvent
 */
export interface CalendarEvent {
    /**
     * 
     * @type {string}
     * @memberof CalendarEvent
     */
    id?: string;
    /**
     * Mongoose Ref ObjectId
     * @type {string}
     * @memberof CalendarEvent
     */
    calendarId?: string;
    /**
     * The name of the event
     * @type {string}
     * @memberof CalendarEvent
     */
    name?: string;
    /**
     * Creation's date
     * @type {string}
     * @memberof CalendarEvent
     */
    dateCreate?: string;
    /**
     * Last modification date
     * @type {string}
     * @memberof CalendarEvent
     */
    dateUpdate?: string;
    /**
     * Beginning date of the event
     * @type {string}
     * @memberof CalendarEvent
     */
    dateStart?: string;
    /**
     * Ending date of the event
     * @type {string}
     * @memberof CalendarEvent
     */
    dateEnd: string;
    /**
     * Description the event
     * @type {string}
     * @memberof CalendarEvent
     */
    description?: string;
}


/**
 * CalendarsCtrlApi - fetch parameter creator
 * @export
 */
export const CalendarsCtrlApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Return a calendar from his ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calendarsCtrlGet(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling calendarsCtrlGet.');
            }
            const localVarPath = `/rest/calendars/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Return all calendars
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calendarsCtrlGetAllCalendars(options: any = {}): FetchArgs {
            const localVarPath = `/rest/calendars`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove a calendar.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calendarsCtrlRemove(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling calendarsCtrlRemove.');
            }
            const localVarPath = `/rest/calendars/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new Calendar
         * @param {Calendar} body Calendar model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calendarsCtrlSave(body: Calendar, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling calendarsCtrlSave.');
            }
            const localVarPath = `/rest/calendars`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Calendar" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update calendar information
         * @param {string} id 
         * @param {Calendar} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calendarsCtrlUpdate(id: string, body: Calendar, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling calendarsCtrlUpdate.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling calendarsCtrlUpdate.');
            }
            const localVarPath = `/rest/calendars/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Calendar" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CalendarsCtrlApi - functional programming interface
 * @export
 */
export const CalendarsCtrlApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Return a calendar from his ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calendarsCtrlGet(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Calendar> {
            const localVarFetchArgs = CalendarsCtrlApiFetchParamCreator(configuration).calendarsCtrlGet(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Return all calendars
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calendarsCtrlGetAllCalendars(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Calendar>> {
            const localVarFetchArgs = CalendarsCtrlApiFetchParamCreator(configuration).calendarsCtrlGetAllCalendars(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Remove a calendar.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calendarsCtrlRemove(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = CalendarsCtrlApiFetchParamCreator(configuration).calendarsCtrlRemove(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Create a new Calendar
         * @param {Calendar} body Calendar model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calendarsCtrlSave(body: Calendar, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Calendar> {
            const localVarFetchArgs = CalendarsCtrlApiFetchParamCreator(configuration).calendarsCtrlSave(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Update calendar information
         * @param {string} id 
         * @param {Calendar} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calendarsCtrlUpdate(id: string, body: Calendar, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Calendar> {
            const localVarFetchArgs = CalendarsCtrlApiFetchParamCreator(configuration).calendarsCtrlUpdate(id, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * CalendarsCtrlApi - factory interface
 * @export
 */
export const CalendarsCtrlApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Return a calendar from his ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calendarsCtrlGet(id: string, options?: any) {
            return CalendarsCtrlApiFp(configuration).calendarsCtrlGet(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Return all calendars
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calendarsCtrlGetAllCalendars(options?: any) {
            return CalendarsCtrlApiFp(configuration).calendarsCtrlGetAllCalendars(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Remove a calendar.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calendarsCtrlRemove(id: string, options?: any) {
            return CalendarsCtrlApiFp(configuration).calendarsCtrlRemove(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Create a new Calendar
         * @param {Calendar} body Calendar model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calendarsCtrlSave(body: Calendar, options?: any) {
            return CalendarsCtrlApiFp(configuration).calendarsCtrlSave(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Update calendar information
         * @param {string} id 
         * @param {Calendar} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calendarsCtrlUpdate(id: string, body: Calendar, options?: any) {
            return CalendarsCtrlApiFp(configuration).calendarsCtrlUpdate(id, body, options)(fetch, basePath);
        },
    };
};

/**
 * CalendarsCtrlApi - object-oriented interface
 * @export
 * @class CalendarsCtrlApi
 * @extends {BaseAPI}
 */
export class CalendarsCtrlApi extends BaseAPI {
    /**
     * 
     * @summary Return a calendar from his ID
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CalendarsCtrlApi
     */
    public calendarsCtrlGet(id: string, options?: any) {
        return CalendarsCtrlApiFp(this.configuration).calendarsCtrlGet(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Return all calendars
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CalendarsCtrlApi
     */
    public calendarsCtrlGetAllCalendars(options?: any) {
        return CalendarsCtrlApiFp(this.configuration).calendarsCtrlGetAllCalendars(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Remove a calendar.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CalendarsCtrlApi
     */
    public calendarsCtrlRemove(id: string, options?: any) {
        return CalendarsCtrlApiFp(this.configuration).calendarsCtrlRemove(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Create a new Calendar
     * @param {Calendar} body Calendar model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CalendarsCtrlApi
     */
    public calendarsCtrlSave(body: Calendar, options?: any) {
        return CalendarsCtrlApiFp(this.configuration).calendarsCtrlSave(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Update calendar information
     * @param {string} id 
     * @param {Calendar} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CalendarsCtrlApi
     */
    public calendarsCtrlUpdate(id: string, body: Calendar, options?: any) {
        return CalendarsCtrlApiFp(this.configuration).calendarsCtrlUpdate(id, body, options)(this.fetch, this.basePath);
    }

}

/**
 * EventsCtrlApi - fetch parameter creator
 * @export
 */
export const EventsCtrlApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get an event from his ID
         * @param {string} calendarId 
         * @param {string} id The event id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsCtrlGet(calendarId: string, id: string, options: any = {}): FetchArgs {
            // verify required parameter 'calendarId' is not null or undefined
            if (calendarId === null || calendarId === undefined) {
                throw new RequiredError('calendarId','Required parameter calendarId was null or undefined when calling eventsCtrlGet.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling eventsCtrlGet.');
            }
            const localVarPath = `/rest/calendars/{calendarId}/events/{id}`
                .replace(`{${"calendarId"}}`, encodeURIComponent(String(calendarId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all events for a calendar
         * @param {string} calendarId The calendar id of the event
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsCtrlGetEvents(calendarId: string, options: any = {}): FetchArgs {
            // verify required parameter 'calendarId' is not null or undefined
            if (calendarId === null || calendarId === undefined) {
                throw new RequiredError('calendarId','Required parameter calendarId was null or undefined when calling eventsCtrlGetEvents.');
            }
            const localVarPath = `/rest/calendars/{calendarId}/events`
                .replace(`{${"calendarId"}}`, encodeURIComponent(String(calendarId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove an event
         * @param {string} calendarId The calendar id of the event
         * @param {string} id The event id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsCtrlRemove(calendarId: string, id: string, options: any = {}): FetchArgs {
            // verify required parameter 'calendarId' is not null or undefined
            if (calendarId === null || calendarId === undefined) {
                throw new RequiredError('calendarId','Required parameter calendarId was null or undefined when calling eventsCtrlRemove.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling eventsCtrlRemove.');
            }
            const localVarPath = `/rest/calendars/{calendarId}/events/{id}`
                .replace(`{${"calendarId"}}`, encodeURIComponent(String(calendarId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create an event
         * @param {string} calendarId The calendar id of the event
         * @param {CalendarEvent} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsCtrlSave(calendarId: string, body?: CalendarEvent, options: any = {}): FetchArgs {
            // verify required parameter 'calendarId' is not null or undefined
            if (calendarId === null || calendarId === undefined) {
                throw new RequiredError('calendarId','Required parameter calendarId was null or undefined when calling eventsCtrlSave.');
            }
            const localVarPath = `/rest/calendars/{calendarId}/events`
                .replace(`{${"calendarId"}}`, encodeURIComponent(String(calendarId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CalendarEvent" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update event information
         * @param {string} calendarId The calendar id of the event
         * @param {string} id The event id
         * @param {CalendarEvent} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsCtrlUpdate(calendarId: string, id: string, body?: CalendarEvent, options: any = {}): FetchArgs {
            // verify required parameter 'calendarId' is not null or undefined
            if (calendarId === null || calendarId === undefined) {
                throw new RequiredError('calendarId','Required parameter calendarId was null or undefined when calling eventsCtrlUpdate.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling eventsCtrlUpdate.');
            }
            const localVarPath = `/rest/calendars/{calendarId}/events/{id}`
                .replace(`{${"calendarId"}}`, encodeURIComponent(String(calendarId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CalendarEvent" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EventsCtrlApi - functional programming interface
 * @export
 */
export const EventsCtrlApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get an event from his ID
         * @param {string} calendarId 
         * @param {string} id The event id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsCtrlGet(calendarId: string, id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = EventsCtrlApiFetchParamCreator(configuration).eventsCtrlGet(calendarId, id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get all events for a calendar
         * @param {string} calendarId The calendar id of the event
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsCtrlGetEvents(calendarId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = EventsCtrlApiFetchParamCreator(configuration).eventsCtrlGetEvents(calendarId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Remove an event
         * @param {string} calendarId The calendar id of the event
         * @param {string} id The event id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsCtrlRemove(calendarId: string, id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = EventsCtrlApiFetchParamCreator(configuration).eventsCtrlRemove(calendarId, id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Create an event
         * @param {string} calendarId The calendar id of the event
         * @param {CalendarEvent} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsCtrlSave(calendarId: string, body?: CalendarEvent, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = EventsCtrlApiFetchParamCreator(configuration).eventsCtrlSave(calendarId, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Update event information
         * @param {string} calendarId The calendar id of the event
         * @param {string} id The event id
         * @param {CalendarEvent} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsCtrlUpdate(calendarId: string, id: string, body?: CalendarEvent, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = EventsCtrlApiFetchParamCreator(configuration).eventsCtrlUpdate(calendarId, id, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * EventsCtrlApi - factory interface
 * @export
 */
export const EventsCtrlApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Get an event from his ID
         * @param {string} calendarId 
         * @param {string} id The event id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsCtrlGet(calendarId: string, id: string, options?: any) {
            return EventsCtrlApiFp(configuration).eventsCtrlGet(calendarId, id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get all events for a calendar
         * @param {string} calendarId The calendar id of the event
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsCtrlGetEvents(calendarId: string, options?: any) {
            return EventsCtrlApiFp(configuration).eventsCtrlGetEvents(calendarId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Remove an event
         * @param {string} calendarId The calendar id of the event
         * @param {string} id The event id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsCtrlRemove(calendarId: string, id: string, options?: any) {
            return EventsCtrlApiFp(configuration).eventsCtrlRemove(calendarId, id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Create an event
         * @param {string} calendarId The calendar id of the event
         * @param {CalendarEvent} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsCtrlSave(calendarId: string, body?: CalendarEvent, options?: any) {
            return EventsCtrlApiFp(configuration).eventsCtrlSave(calendarId, body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Update event information
         * @param {string} calendarId The calendar id of the event
         * @param {string} id The event id
         * @param {CalendarEvent} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsCtrlUpdate(calendarId: string, id: string, body?: CalendarEvent, options?: any) {
            return EventsCtrlApiFp(configuration).eventsCtrlUpdate(calendarId, id, body, options)(fetch, basePath);
        },
    };
};

/**
 * EventsCtrlApi - object-oriented interface
 * @export
 * @class EventsCtrlApi
 * @extends {BaseAPI}
 */
export class EventsCtrlApi extends BaseAPI {
    /**
     * 
     * @summary Get an event from his ID
     * @param {string} calendarId 
     * @param {string} id The event id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsCtrlApi
     */
    public eventsCtrlGet(calendarId: string, id: string, options?: any) {
        return EventsCtrlApiFp(this.configuration).eventsCtrlGet(calendarId, id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get all events for a calendar
     * @param {string} calendarId The calendar id of the event
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsCtrlApi
     */
    public eventsCtrlGetEvents(calendarId: string, options?: any) {
        return EventsCtrlApiFp(this.configuration).eventsCtrlGetEvents(calendarId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Remove an event
     * @param {string} calendarId The calendar id of the event
     * @param {string} id The event id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsCtrlApi
     */
    public eventsCtrlRemove(calendarId: string, id: string, options?: any) {
        return EventsCtrlApiFp(this.configuration).eventsCtrlRemove(calendarId, id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Create an event
     * @param {string} calendarId The calendar id of the event
     * @param {CalendarEvent} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsCtrlApi
     */
    public eventsCtrlSave(calendarId: string, body?: CalendarEvent, options?: any) {
        return EventsCtrlApiFp(this.configuration).eventsCtrlSave(calendarId, body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Update event information
     * @param {string} calendarId The calendar id of the event
     * @param {string} id The event id
     * @param {CalendarEvent} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsCtrlApi
     */
    public eventsCtrlUpdate(calendarId: string, id: string, body?: CalendarEvent, options?: any) {
        return EventsCtrlApiFp(this.configuration).eventsCtrlUpdate(calendarId, id, body, options)(this.fetch, this.basePath);
    }

}

