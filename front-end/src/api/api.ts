// tslint:disable
/**
 * Api documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Calendar
 */
export interface Calendar {
    /**
     * Mongoose ObjectId
     * @type {string}
     * @memberof Calendar
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Calendar
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Calendar
     */
    owner?: string;
}
/**
 * 
 * @export
 * @interface CalendarEvent
 */
export interface CalendarEvent {
    /**
     * 
     * @type {string}
     * @memberof CalendarEvent
     */
    id?: string;
    /**
     * Mongoose Ref ObjectId
     * @type {string}
     * @memberof CalendarEvent
     */
    calendarId?: string;
    /**
     * The name of the event
     * @type {string}
     * @memberof CalendarEvent
     */
    name?: string;
    /**
     * Creation\'s date
     * @type {string}
     * @memberof CalendarEvent
     */
    dateCreate?: string;
    /**
     * Last modification date
     * @type {string}
     * @memberof CalendarEvent
     */
    dateUpdate?: string;
    /**
     * Beginning date of the event
     * @type {string}
     * @memberof CalendarEvent
     */
    dateStart?: string;
    /**
     * Ending date of the event
     * @type {string}
     * @memberof CalendarEvent
     */
    dateEnd: string;
    /**
     * Description the event
     * @type {string}
     * @memberof CalendarEvent
     */
    description?: string;
}

/**
 * CalendarsCtrlApi - axios parameter creator
 * @export
 */
export const CalendarsCtrlApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Return a calendar from his ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calendarsCtrlGet: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling calendarsCtrlGet.');
            }
            const localVarPath = `/rest/calendars/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Return all calendars
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calendarsCtrlGetAllCalendars: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/rest/calendars`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove a calendar.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calendarsCtrlRemove: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling calendarsCtrlRemove.');
            }
            const localVarPath = `/rest/calendars/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new Calendar
         * @param {Calendar} body Calendar model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calendarsCtrlSave: async (body: Calendar, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling calendarsCtrlSave.');
            }
            const localVarPath = `/rest/calendars`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update calendar information
         * @param {string} id 
         * @param {Calendar} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calendarsCtrlUpdate: async (id: string, body: Calendar, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling calendarsCtrlUpdate.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling calendarsCtrlUpdate.');
            }
            const localVarPath = `/rest/calendars/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CalendarsCtrlApi - functional programming interface
 * @export
 */
export const CalendarsCtrlApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Return a calendar from his ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async calendarsCtrlGet(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Calendar>> {
            const localVarAxiosArgs = await CalendarsCtrlApiAxiosParamCreator(configuration).calendarsCtrlGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Return all calendars
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async calendarsCtrlGetAllCalendars(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Calendar>>> {
            const localVarAxiosArgs = await CalendarsCtrlApiAxiosParamCreator(configuration).calendarsCtrlGetAllCalendars(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Remove a calendar.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async calendarsCtrlRemove(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await CalendarsCtrlApiAxiosParamCreator(configuration).calendarsCtrlRemove(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Create a new Calendar
         * @param {Calendar} body Calendar model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async calendarsCtrlSave(body: Calendar, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Calendar>> {
            const localVarAxiosArgs = await CalendarsCtrlApiAxiosParamCreator(configuration).calendarsCtrlSave(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update calendar information
         * @param {string} id 
         * @param {Calendar} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async calendarsCtrlUpdate(id: string, body: Calendar, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Calendar>> {
            const localVarAxiosArgs = await CalendarsCtrlApiAxiosParamCreator(configuration).calendarsCtrlUpdate(id, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CalendarsCtrlApi - factory interface
 * @export
 */
export const CalendarsCtrlApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Return a calendar from his ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calendarsCtrlGet(id: string, options?: any): AxiosPromise<Calendar> {
            return CalendarsCtrlApiFp(configuration).calendarsCtrlGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Return all calendars
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calendarsCtrlGetAllCalendars(options?: any): AxiosPromise<Array<Calendar>> {
            return CalendarsCtrlApiFp(configuration).calendarsCtrlGetAllCalendars(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove a calendar.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calendarsCtrlRemove(id: string, options?: any): AxiosPromise<void> {
            return CalendarsCtrlApiFp(configuration).calendarsCtrlRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new Calendar
         * @param {Calendar} body Calendar model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calendarsCtrlSave(body: Calendar, options?: any): AxiosPromise<Calendar> {
            return CalendarsCtrlApiFp(configuration).calendarsCtrlSave(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update calendar information
         * @param {string} id 
         * @param {Calendar} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calendarsCtrlUpdate(id: string, body: Calendar, options?: any): AxiosPromise<Calendar> {
            return CalendarsCtrlApiFp(configuration).calendarsCtrlUpdate(id, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CalendarsCtrlApi - object-oriented interface
 * @export
 * @class CalendarsCtrlApi
 * @extends {BaseAPI}
 */
export class CalendarsCtrlApi extends BaseAPI {
    /**
     * 
     * @summary Return a calendar from his ID
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CalendarsCtrlApi
     */
    public calendarsCtrlGet(id: string, options?: any) {
        return CalendarsCtrlApiFp(this.configuration).calendarsCtrlGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Return all calendars
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CalendarsCtrlApi
     */
    public calendarsCtrlGetAllCalendars(options?: any) {
        return CalendarsCtrlApiFp(this.configuration).calendarsCtrlGetAllCalendars(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove a calendar.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CalendarsCtrlApi
     */
    public calendarsCtrlRemove(id: string, options?: any) {
        return CalendarsCtrlApiFp(this.configuration).calendarsCtrlRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new Calendar
     * @param {Calendar} body Calendar model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CalendarsCtrlApi
     */
    public calendarsCtrlSave(body: Calendar, options?: any) {
        return CalendarsCtrlApiFp(this.configuration).calendarsCtrlSave(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update calendar information
     * @param {string} id 
     * @param {Calendar} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CalendarsCtrlApi
     */
    public calendarsCtrlUpdate(id: string, body: Calendar, options?: any) {
        return CalendarsCtrlApiFp(this.configuration).calendarsCtrlUpdate(id, body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * EventsCtrlApi - axios parameter creator
 * @export
 */
export const EventsCtrlApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get an event from his ID
         * @param {string} calendarId 
         * @param {string} id The event id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsCtrlGet: async (calendarId: string, id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'calendarId' is not null or undefined
            if (calendarId === null || calendarId === undefined) {
                throw new RequiredError('calendarId','Required parameter calendarId was null or undefined when calling eventsCtrlGet.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling eventsCtrlGet.');
            }
            const localVarPath = `/rest/calendars/{calendarId}/events/{id}`
                .replace(`{${"calendarId"}}`, encodeURIComponent(String(calendarId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all events for a calendar
         * @param {string} calendarId The calendar id of the event
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsCtrlGetEvents: async (calendarId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'calendarId' is not null or undefined
            if (calendarId === null || calendarId === undefined) {
                throw new RequiredError('calendarId','Required parameter calendarId was null or undefined when calling eventsCtrlGetEvents.');
            }
            const localVarPath = `/rest/calendars/{calendarId}/events`
                .replace(`{${"calendarId"}}`, encodeURIComponent(String(calendarId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove an event
         * @param {string} calendarId The calendar id of the event
         * @param {string} id The event id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsCtrlRemove: async (calendarId: string, id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'calendarId' is not null or undefined
            if (calendarId === null || calendarId === undefined) {
                throw new RequiredError('calendarId','Required parameter calendarId was null or undefined when calling eventsCtrlRemove.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling eventsCtrlRemove.');
            }
            const localVarPath = `/rest/calendars/{calendarId}/events/{id}`
                .replace(`{${"calendarId"}}`, encodeURIComponent(String(calendarId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create an event
         * @param {string} calendarId The calendar id of the event
         * @param {CalendarEvent} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsCtrlSave: async (calendarId: string, body?: CalendarEvent, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'calendarId' is not null or undefined
            if (calendarId === null || calendarId === undefined) {
                throw new RequiredError('calendarId','Required parameter calendarId was null or undefined when calling eventsCtrlSave.');
            }
            const localVarPath = `/rest/calendars/{calendarId}/events`
                .replace(`{${"calendarId"}}`, encodeURIComponent(String(calendarId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update event information
         * @param {string} calendarId The calendar id of the event
         * @param {string} id The event id
         * @param {CalendarEvent} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsCtrlUpdate: async (calendarId: string, id: string, body?: CalendarEvent, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'calendarId' is not null or undefined
            if (calendarId === null || calendarId === undefined) {
                throw new RequiredError('calendarId','Required parameter calendarId was null or undefined when calling eventsCtrlUpdate.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling eventsCtrlUpdate.');
            }
            const localVarPath = `/rest/calendars/{calendarId}/events/{id}`
                .replace(`{${"calendarId"}}`, encodeURIComponent(String(calendarId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EventsCtrlApi - functional programming interface
 * @export
 */
export const EventsCtrlApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get an event from his ID
         * @param {string} calendarId 
         * @param {string} id The event id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsCtrlGet(calendarId: string, id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await EventsCtrlApiAxiosParamCreator(configuration).eventsCtrlGet(calendarId, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get all events for a calendar
         * @param {string} calendarId The calendar id of the event
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsCtrlGetEvents(calendarId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await EventsCtrlApiAxiosParamCreator(configuration).eventsCtrlGetEvents(calendarId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Remove an event
         * @param {string} calendarId The calendar id of the event
         * @param {string} id The event id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsCtrlRemove(calendarId: string, id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await EventsCtrlApiAxiosParamCreator(configuration).eventsCtrlRemove(calendarId, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Create an event
         * @param {string} calendarId The calendar id of the event
         * @param {CalendarEvent} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsCtrlSave(calendarId: string, body?: CalendarEvent, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await EventsCtrlApiAxiosParamCreator(configuration).eventsCtrlSave(calendarId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update event information
         * @param {string} calendarId The calendar id of the event
         * @param {string} id The event id
         * @param {CalendarEvent} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsCtrlUpdate(calendarId: string, id: string, body?: CalendarEvent, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await EventsCtrlApiAxiosParamCreator(configuration).eventsCtrlUpdate(calendarId, id, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * EventsCtrlApi - factory interface
 * @export
 */
export const EventsCtrlApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Get an event from his ID
         * @param {string} calendarId 
         * @param {string} id The event id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsCtrlGet(calendarId: string, id: string, options?: any): AxiosPromise<void> {
            return EventsCtrlApiFp(configuration).eventsCtrlGet(calendarId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all events for a calendar
         * @param {string} calendarId The calendar id of the event
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsCtrlGetEvents(calendarId: string, options?: any): AxiosPromise<void> {
            return EventsCtrlApiFp(configuration).eventsCtrlGetEvents(calendarId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove an event
         * @param {string} calendarId The calendar id of the event
         * @param {string} id The event id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsCtrlRemove(calendarId: string, id: string, options?: any): AxiosPromise<void> {
            return EventsCtrlApiFp(configuration).eventsCtrlRemove(calendarId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create an event
         * @param {string} calendarId The calendar id of the event
         * @param {CalendarEvent} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsCtrlSave(calendarId: string, body?: CalendarEvent, options?: any): AxiosPromise<void> {
            return EventsCtrlApiFp(configuration).eventsCtrlSave(calendarId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update event information
         * @param {string} calendarId The calendar id of the event
         * @param {string} id The event id
         * @param {CalendarEvent} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsCtrlUpdate(calendarId: string, id: string, body?: CalendarEvent, options?: any): AxiosPromise<void> {
            return EventsCtrlApiFp(configuration).eventsCtrlUpdate(calendarId, id, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EventsCtrlApi - object-oriented interface
 * @export
 * @class EventsCtrlApi
 * @extends {BaseAPI}
 */
export class EventsCtrlApi extends BaseAPI {
    /**
     * 
     * @summary Get an event from his ID
     * @param {string} calendarId 
     * @param {string} id The event id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsCtrlApi
     */
    public eventsCtrlGet(calendarId: string, id: string, options?: any) {
        return EventsCtrlApiFp(this.configuration).eventsCtrlGet(calendarId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all events for a calendar
     * @param {string} calendarId The calendar id of the event
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsCtrlApi
     */
    public eventsCtrlGetEvents(calendarId: string, options?: any) {
        return EventsCtrlApiFp(this.configuration).eventsCtrlGetEvents(calendarId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove an event
     * @param {string} calendarId The calendar id of the event
     * @param {string} id The event id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsCtrlApi
     */
    public eventsCtrlRemove(calendarId: string, id: string, options?: any) {
        return EventsCtrlApiFp(this.configuration).eventsCtrlRemove(calendarId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create an event
     * @param {string} calendarId The calendar id of the event
     * @param {CalendarEvent} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsCtrlApi
     */
    public eventsCtrlSave(calendarId: string, body?: CalendarEvent, options?: any) {
        return EventsCtrlApiFp(this.configuration).eventsCtrlSave(calendarId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update event information
     * @param {string} calendarId The calendar id of the event
     * @param {string} id The event id
     * @param {CalendarEvent} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsCtrlApi
     */
    public eventsCtrlUpdate(calendarId: string, id: string, body?: CalendarEvent, options?: any) {
        return EventsCtrlApiFp(this.configuration).eventsCtrlUpdate(calendarId, id, body, options).then((request) => request(this.axios, this.basePath));
    }
}


